/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

using Newtonsoft.Json;

using RosSharp.RosBridgeClient.MessageTypes.Geometry;
using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Gazebo
{
    public class ApplyBodyWrenchRequest : Message
    {
        [JsonIgnore]
        public const string RosMessageName = "gazebo_msgs/ApplyBodyWrench";

        //  Apply Wrench to Gazebo Body.
        //  via the callback mechanism
        //  all Gazebo operations are made in world frame
        public string body_name;
        //  Gazebo body to apply wrench (linear force and torque)
        //  wrench is applied in the gazebo world by default
        //  body names are prefixed by model name, e.g. pr2::base_link
        public string reference_frame;
        //  wrench is defined in the reference frame of this entity
        //  use inertial frame if left empty
        //  frame names are bodies prefixed by model name, e.g. pr2::base_link
        public Point reference_point;
        //  wrench is defined at this location in the reference frame
        public Wrench wrench;
        //  wrench applied to the origin of the body
        public Time start_time;
        //  (optional) wrench application start time (seconds)
        //  if start_time is not specified, or
        //  start_time < current time, start as soon as possible
        public Duration duration;
        //  optional duration of wrench application time (seconds)
        //  if duration < 0, apply wrench continuously without end
        //  if duration = 0, do nothing
        //  if duration < step size, apply wrench
        //  for one step size

        public ApplyBodyWrenchRequest()
        {
            this.body_name = "";
            this.reference_frame = "";
            this.reference_point = new Point();
            this.wrench = new Wrench();
            this.start_time = new Time();
            this.duration = new Duration();
        }

        public ApplyBodyWrenchRequest(string body_name, string reference_frame, Point reference_point, Wrench wrench, Time start_time, Duration duration)
        {
            this.body_name = body_name;
            this.reference_frame = reference_frame;
            this.reference_point = reference_point;
            this.wrench = wrench;
            this.start_time = start_time;
            this.duration = duration;
        }
    }
}
