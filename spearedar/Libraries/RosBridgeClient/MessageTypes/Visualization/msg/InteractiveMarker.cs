/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

using Newtonsoft.Json;

using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Geometry;

namespace RosSharp.RosBridgeClient.MessageTypes.Visualization
{
    public class InteractiveMarker : Message
    {
        [JsonIgnore]
        public const string RosMessageName = "visualization_msgs/InteractiveMarker";

        //  Time/frame info.
        //  If header.time is set to 0, the marker will be retransformed into
        //  its frame on each timestep. You will receive the pose feedback
        //  in the same frame.
        //  Otherwise, you might receive feedback in a different frame.
        //  For rviz, this will be the current 'fixed frame' set by the user.
        public Header header;
        //  Initial pose. Also, defines the pivot point for rotations.
        public Pose pose;
        //  Identifying string. Must be globally unique in
        //  the topic that this message is sent through.
        public string name;
        //  Short description (< 40 characters).
        public string description;
        //  Scale to be used for default controls (default=1).
        public float scale;
        //  All menu and submenu entries associated with this marker.
        public MenuEntry[] menu_entries;
        //  List of controls displayed for this marker.
        public InteractiveMarkerControl[] controls;

        public InteractiveMarker()
        {
            this.header = new Header();
            this.pose = new Pose();
            this.name = "";
            this.description = "";
            this.scale = 0.0f;
            this.menu_entries = new MenuEntry[0];
            this.controls = new InteractiveMarkerControl[0];
        }

        public InteractiveMarker(Header header, Pose pose, string name, string description, float scale, MenuEntry[] menu_entries, InteractiveMarkerControl[] controls)
        {
            this.header = header;
            this.pose = pose;
            this.name = name;
            this.description = description;
            this.scale = scale;
            this.menu_entries = menu_entries;
            this.controls = controls;
        }
    }
}
