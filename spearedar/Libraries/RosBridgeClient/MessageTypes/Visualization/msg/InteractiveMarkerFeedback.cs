/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

using Newtonsoft.Json;

using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Geometry;

namespace RosSharp.RosBridgeClient.MessageTypes.Visualization
{
    public class InteractiveMarkerFeedback : Message
    {
        [JsonIgnore]
        public const string RosMessageName = "visualization_msgs/InteractiveMarkerFeedback";

        //  Time/frame info.
        public Header header;
        //  Identifying string. Must be unique in the topic namespace.
        public string client_id;
        //  Feedback message sent back from the GUI, e.g.
        //  when the status of an interactive marker was modified by the user.
        //  Specifies which interactive marker and control this message refers to
        public string marker_name;
        public string control_name;
        //  Type of the event
        //  KEEP_ALIVE: sent while dragging to keep up control of the marker
        //  MENU_SELECT: a menu entry has been selected
        //  BUTTON_CLICK: a button control has been clicked
        //  POSE_UPDATE: the pose has been changed using one of the controls
        public const byte KEEP_ALIVE = 0;
        public const byte POSE_UPDATE = 1;
        public const byte MENU_SELECT = 2;
        public const byte BUTTON_CLICK = 3;
        public const byte MOUSE_DOWN = 4;
        public const byte MOUSE_UP = 5;
        public byte event_type;
        //  Current pose of the marker
        //  Note: Has to be valid for all feedback types.
        public Pose pose;
        //  Contains the ID of the selected menu entry
        //  Only valid for MENU_SELECT events.
        public uint menu_entry_id;
        //  If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point
        //  may contain the 3 dimensional position of the event on the
        //  control.  If it does, mouse_point_valid will be true.  mouse_point
        //  will be relative to the frame listed in the header.
        public Point mouse_point;
        public bool mouse_point_valid;

        public InteractiveMarkerFeedback()
        {
            this.header = new Header();
            this.client_id = "";
            this.marker_name = "";
            this.control_name = "";
            this.event_type = 0;
            this.pose = new Pose();
            this.menu_entry_id = 0;
            this.mouse_point = new Point();
            this.mouse_point_valid = false;
        }

        public InteractiveMarkerFeedback(Header header, string client_id, string marker_name, string control_name, byte event_type, Pose pose, uint menu_entry_id, Point mouse_point, bool mouse_point_valid)
        {
            this.header = header;
            this.client_id = client_id;
            this.marker_name = marker_name;
            this.control_name = control_name;
            this.event_type = event_type;
            this.pose = pose;
            this.menu_entry_id = menu_entry_id;
            this.mouse_point = mouse_point;
            this.mouse_point_valid = mouse_point_valid;
        }
    }
}
